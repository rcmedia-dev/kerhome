generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // ou "mysql", "sqlite", dependendo do teu banco
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  password      String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Perfil
  primeiro_nome String?
  ultimo_nome   String?
  username      String?    @unique
  telefone      String?
  empresa       String?
  licenca       String?
  website       String?
  facebook      String?
  linkedin      String?
  instagram     String?
  youtube       String?
  sobre_mim     String?
  pacote_agente   PlanoAgente?

  // Relacionamentos
  properties     Property[]
  faturas        Fatura[]
  imoveisGuardados Property[] @relation("ImoveisGuardados")
  
  mensagensEnviadas Mensagem[]   @relation("MensagemDe")
  mensagensRecebidas Mensagem[]  @relation("MensagemPara")
}

model PlanoAgente {
  id           String   @id @default(uuid())
  nome         String
  limite       Int
  restante     Int
  destaques    Boolean
  destaquesPermitidos  Int      @default(1)
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @unique
}

model Property {
  id               String    @id @default(uuid())
  owner            User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId          String

  title            String
  description      String
  tipo             String
  status           String
  rotulo           String?
  price            Float?
  unidade_preco    String?
  preco_antes      Float?
  preco_depois     Float?
  preco_chamada    String?
  caracteristicas  Json?
  size             String?
  area_terreno     Float?
  bedrooms         Int?
  bathrooms        Int?
  garagens         Int?
  garagemtamanho   String?
  anoconstrucao    Int?
  propertyid       String?   @unique
  detalhesadicionais Json?
  endereco         String?
  bairro           String?
  cidade           String?
  provincia        String?
  pais             String?
  notaprivada      String?
  gallery          String[]  // Lista de URLs
  image            String?

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Guardado por usuários (muitos para muitos)
  guardadoPor      User[]    @relation("ImoveisGuardados")
}

// Placeholder para Fatura
model Fatura {
  id         String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  valor      Float
  status     String
  servico    String    // <- novo campo: nome do plano ou serviço
  criadoEm   DateTime @default(now())
}


// Placeholder para Mensagens
model Mensagem {
  id         String   @id @default(uuid())
  de         User     @relation("MensagemDe", fields: [deId], references: [id], onDelete: Cascade)
  deId       String
  para       User     @relation("MensagemPara", fields: [paraId], references: [id], onDelete: Cascade)
  paraId     String
  conteudo   String
  criadoEm   DateTime @default(now())
}
